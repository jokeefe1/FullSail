type Profile {
  id: ID!
  picture: String
  firstName: String!
  lastName: String!
  course(filter: ModelCourseFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCourseConnection
}

type Course {
  id: ID!
  title: String!
  content: String!
  profile: Profile
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelProfileConnection {
  items: [Profile]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelProfileFilterInput {
  id: ModelIDFilterInput
  picture: ModelStringFilterInput
  firstName: ModelStringFilterInput
  lastName: ModelStringFilterInput
  and: [ModelProfileFilterInput]
  or: [ModelProfileFilterInput]
  not: ModelProfileFilterInput
}

type Query {
  getProfile(id: ID!): Profile
  listProfiles(filter: ModelProfileFilterInput, limit: Int, nextToken: String): ModelProfileConnection
  getCourse(id: ID!): Course
  listCourses(filter: ModelCourseFilterInput, limit: Int, nextToken: String): ModelCourseConnection
  searchCourses(filter: SearchableCourseFilterInput, sort: SearchableCourseSortInput, limit: Int, nextToken: Int): SearchableCourseConnection
}

input CreateProfileInput {
  id: ID
  picture: String
  firstName: String!
  lastName: String!
}

input UpdateProfileInput {
  id: ID!
  picture: String
  firstName: String
  lastName: String
}

input DeleteProfileInput {
  id: ID
}

type Mutation {
  createProfile(input: CreateProfileInput!): Profile
  updateProfile(input: UpdateProfileInput!): Profile
  deleteProfile(input: DeleteProfileInput!): Profile
  createCourse(input: CreateCourseInput!): Course
  updateCourse(input: UpdateCourseInput!): Course
  deleteCourse(input: DeleteCourseInput!): Course
}

type Subscription {
  onCreateProfile: Profile @aws_subscribe(mutations: ["createProfile"])
  onUpdateProfile: Profile @aws_subscribe(mutations: ["updateProfile"])
  onDeleteProfile: Profile @aws_subscribe(mutations: ["deleteProfile"])
  onCreateCourse: Course @aws_subscribe(mutations: ["createCourse"])
  onUpdateCourse: Course @aws_subscribe(mutations: ["updateCourse"])
  onDeleteCourse: Course @aws_subscribe(mutations: ["deleteCourse"])
}

type ModelCourseConnection {
  items: [Course]
  nextToken: String
}

input ModelCourseFilterInput {
  id: ModelIDFilterInput
  title: ModelStringFilterInput
  content: ModelStringFilterInput
  and: [ModelCourseFilterInput]
  or: [ModelCourseFilterInput]
  not: ModelCourseFilterInput
}

input CreateCourseInput {
  id: ID
  title: String!
  content: String!
  courseProfileId: ID
}

input UpdateCourseInput {
  id: ID!
  title: String
  content: String
  courseProfileId: ID
}

input DeleteCourseInput {
  id: ID
}

input SearchableStringFilterInput {
  ne: String
  eq: String
  match: String
  matchPhrase: String
  matchPhrasePrefix: String
  multiMatch: String
  exists: Boolean
  wildcard: String
  regexp: String
}

input SearchableIDFilterInput {
  ne: ID
  eq: ID
  match: ID
  matchPhrase: ID
  matchPhrasePrefix: ID
  multiMatch: ID
  exists: Boolean
  wildcard: ID
  regexp: ID
}

input SearchableIntFilterInput {
  ne: Int
  gt: Int
  lt: Int
  gte: Int
  lte: Int
  eq: Int
  range: [Int]
}

input SearchableFloatFilterInput {
  ne: Float
  gt: Float
  lt: Float
  gte: Float
  lte: Float
  eq: Float
  range: [Float]
}

input SearchableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input SearchableCourseFilterInput {
  id: SearchableIDFilterInput
  title: SearchableStringFilterInput
  content: SearchableStringFilterInput
  and: [SearchableCourseFilterInput]
  or: [SearchableCourseFilterInput]
  not: SearchableCourseFilterInput
}

enum SearchableSortDirection {
  asc
  desc
}

enum SearchableCourseSortableFields {
  id
  title
  content
}

input SearchableCourseSortInput {
  field: SearchableCourseSortableFields
  direction: SearchableSortDirection
}

type SearchableCourseConnection {
  items: [Course]
  nextToken: String
}
